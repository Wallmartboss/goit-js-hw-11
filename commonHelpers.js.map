{"version":3,"file":"commonHelpers.js","sources":["../src/js/pixabay-api.js","../src/js/render-functions.js","../src/main.js"],"sourcesContent":["\nexport function pixabayRequest(userData) {\n\n  const searchUrl = `https://pixabay.com/api/?key=43769580-78f5aea5f54664bb89b2b40f7&q=${userData}&image_type=photo&orientation=horizontal&safesearch=true`;\n\n  return fetch(searchUrl)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(response.status);\n      }\n      return response.json();\n      console.log(response.json());\n    });\n}","\nexport function markupGallery(response, gallery) {\n              let images = [];\n                for (let i = 0; i < response.hits.length; i++) {\n                    let pic = {};\n                    pic.url = response.hits[i].webformatURL;\n                    pic.largeUrl = response.hits[i].largeImageURL;\n                    pic.tags = response.hits[i].tags;\n                    pic.likes = response.hits[i].likes;\n                    pic.views = response.hits[i].views;\n                    pic.comments = response.hits[i].comments;\n                    pic.downloads = response.hits[i].downloads;\n                    images.push(pic);\n                }\n            \n                const createElGallery = image => {\n                    return `<li class=\"gallery-item\">\n              <a class=\"gallery-link\" href=\"${image.largeUrl}\">\n                <img class=\"gallery-image\"\n                  src=\"${image.url}\"\n                  alt=\"${image.tags}\"\n                />\n              </a>\n              <div class=\"item-info\">\n                <div class=\"item-data\">\n                  <p class=\"item-param\">Likes</p>\n                  <p class=\"item-counter\">${image.likes}</p>\n                </div>\n                <div class=\"item-data\">\n                  <p class=\"item-param\">Views</p>\n                  <p class=\"item-counter\">${image.views}</p>\n                </div>\n                <div class=\"item-data\">\n                  <p class=\"item-param\">Comments</p>\n                  <p class=\"item-counter\">${image.comments}</p>\n                </div>\n                <div class=\"item-data\">\n                  <p class=\"item-param\">Downloads</p>\n                  <p class=\"item-counter\">${image.downloads}</p>\n                </div>\n              </div>\n            </li>`;\n                };\n                const createGallery = images.map(image => createElGallery(image)).join('');\n\n                gallery.innerHTML = createGallery;\n};","import SimpleLightbox from 'simplelightbox';\nimport 'simplelightbox/dist/simple-lightbox.min.css';\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nimport { pixabayRequest } from './js/pixabay-api';\nimport { markupGallery } from './js/render-functions';\n\nconst form = document.querySelector('.search-form');\nconst input = form.querySelector('input');\nlet userData;\n// let images = [];\nconst gallery = document.querySelector('ul.gallery');\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n  const textInput = input.value.trim();\n\n  if (textInput === \"\") {\n    iziToast.warning({\n    title: 'Caution',\n    message: 'This field must be filled in',\n    position: 'topLeft',\n  }) } else {\n    userData = textInput;\n    form.reset();\n    gallery.innerHTML = \"\";\n    \n    pixabayRequest(userData)\n        .then(response => {\n            if (response.hits.length > 0) {\n                  markupGallery(response, gallery);\n              \n                let lightbox = new SimpleLightbox('.gallery a', {\n                    captionsData: 'alt',\n                });\n                lightbox.refresh()\n            } else {\n                iziToast.error({\n                    title: 'Error',\n                    message: `Sorry, there are no images matching your search query. Please try again!`,\n                    position: 'topRight',\n                });\n            }\n        })\n      .catch(error => {\n        console.error('Виникла помилка: ', error);\n      });\n  }\n}\n\nform.addEventListener(\"submit\", handleSubmit);\n\n"],"names":["pixabayRequest","userData","searchUrl","response","markupGallery","gallery","images","i","pic","createElGallery","image","createGallery","form","input","handleSubmit","event","textInput","iziToast","SimpleLightbox","error"],"mappings":"6vBACO,SAASA,EAAeC,EAAU,CAEvC,MAAMC,EAAY,qEAAqED,CAAQ,2DAE/F,OAAO,MAAMC,CAAS,EACnB,KAAMC,GAAa,CAClB,GAAI,CAACA,EAAS,GACZ,MAAM,IAAI,MAAMA,EAAS,MAAM,EAEjC,OAAOA,EAAS,MAEtB,CAAK,CACL,CCZO,SAASC,EAAcD,EAAUE,EAAS,CACnC,IAAIC,EAAS,CAAA,EACX,QAASC,EAAI,EAAGA,EAAIJ,EAAS,KAAK,OAAQI,IAAK,CAC3C,IAAIC,EAAM,CAAA,EACVA,EAAI,IAAML,EAAS,KAAKI,CAAC,EAAE,aAC3BC,EAAI,SAAWL,EAAS,KAAKI,CAAC,EAAE,cAChCC,EAAI,KAAOL,EAAS,KAAKI,CAAC,EAAE,KAC5BC,EAAI,MAAQL,EAAS,KAAKI,CAAC,EAAE,MAC7BC,EAAI,MAAQL,EAAS,KAAKI,CAAC,EAAE,MAC7BC,EAAI,SAAWL,EAAS,KAAKI,CAAC,EAAE,SAChCC,EAAI,UAAYL,EAAS,KAAKI,CAAC,EAAE,UACjCD,EAAO,KAAKE,CAAG,CAClB,CAED,MAAMC,EAAkBC,GACb;AAAA,8CACmBA,EAAM,QAAQ;AAAA;AAAA,yBAEnCA,EAAM,GAAG;AAAA,yBACTA,EAAM,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAMSA,EAAM,KAAK;AAAA;AAAA;AAAA;AAAA,4CAIXA,EAAM,KAAK;AAAA;AAAA;AAAA;AAAA,4CAIXA,EAAM,QAAQ;AAAA;AAAA;AAAA;AAAA,4CAIdA,EAAM,SAAS;AAAA;AAAA;AAAA,mBAKrCC,EAAgBL,EAAO,IAAII,GAASD,EAAgBC,CAAK,CAAC,EAAE,KAAK,EAAE,EAEzEL,EAAQ,UAAYM,CACpC,CCtCA,MAAMC,EAAO,SAAS,cAAc,cAAc,EAC5CC,EAAQD,EAAK,cAAc,OAAO,EACxC,IAAIX,EAEJ,MAAMI,EAAU,SAAS,cAAc,YAAY,EAEnD,SAASS,EAAaC,EAAO,CAC3BA,EAAM,eAAc,EACpB,MAAMC,EAAYH,EAAM,MAAM,KAAI,EAE9BG,IAAc,GAChBC,EAAS,QAAQ,CACjB,MAAO,UACP,QAAS,+BACT,SAAU,SACX,CAAA,GACChB,EAAWe,EACXJ,EAAK,MAAK,EACVP,EAAQ,UAAY,GAEpBL,EAAeC,CAAQ,EAClB,KAAKE,GAAY,CACVA,EAAS,KAAK,OAAS,GACrBC,EAAcD,EAAUE,CAAO,EAElB,IAAIa,EAAe,aAAc,CAC5C,aAAc,KAClC,CAAiB,EACQ,QAAS,GAElBD,EAAS,MAAM,CACX,MAAO,QACP,QAAS,2EACT,SAAU,UAC9B,CAAiB,CAEjB,CAAS,EACF,MAAME,GAAS,CACd,QAAQ,MAAM,oBAAqBA,CAAK,CAChD,CAAO,EAEP,CAEAP,EAAK,iBAAiB,SAAUE,CAAY"}